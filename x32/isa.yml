sections:
  - name: "Register setters"
    starting_point: 0
    instructions:
      - mnemonic: nop
      
      - mnemonic: setb
        operands: [ des_r8, val_v8 ]
        description: "Set 8-bit value to 8-bit register 'des'"

      - mnemonic: setw
        operands: [ des_r16, val_v16 ]
        description: "Set 16-bit value to 16-bit register 'des'"
      
      - mnemonic: setl
        operands: [ des_r32, val_v32 ]
        description: "Set 32-bit value to 32-bit register 'des'"
      
  - name: "Memory operations"
    starting_point: 4
    instructions:
      - mnemonic: loadb
        operands: [ des_r8, addr_v8]
        description: "Load 8-bit value from memory to 8-bit register 'des'"
      
      - mnemonic: loadw
        operands: [ des_r16, addr_v16]
        description: "Load 16-bit value from memory to 16-bit register 'des'"
      
      - mnemonic: loadl
        operands: [ des_r32, addr_v32]
        description: "Load 32-bit value from memory to 32-bit register 'des'"
      
      - mnemonic: storeb
        operands: [ addr_v8, des_r8]
        description: "Store 8-bit value from 8-bit register 'des' to memory"
      
      - mnemonic: storew
        operands: [ addr_v16, des_r16]
        description: "Store 16-bit value from 16-bit register 'des' to memory"
      
      - mnemonic: storel
        operands: [ addr_v32, des_r32]
        description: "Store 32-bit value from 32-bit register 'des' to memory"
  
  - name: "Bitwise operations"
    starting_point: 10
    instructions:
      - mnemonic: notb
        operands: [ des_r8 ]
        description: "Bitwise NOT of 8-bit register 'des'"
      
      - mnemonic: notw
        operands: [ des_r16 ]
        description: "Bitwise NOT of 16-bit register 'des'"
      
      - mnemonic: notl
        operands: [ des_r32 ]
        description: "Bitwise NOT of 32-bit register 'des'"
      
      - mnemonic: andb
        operands: [ des_r8, a_r8, b_r8 ]
        description: "Bitwise AND between 8-bit register `a` and 8-bit register `b` and store result in 8-bit register `des`"
      
      - mnemonic: andw
        operands: [ des_r16, a_r16, b_r16 ]
        description: "Bitwise AND between 16-bit register `a` and 16-bit register `b` and store result in 16-bit register `des`"

      - mnemonic: andl
        operands: [ des_r32, a_r32, b_r32 ]
        description: "Bitwise AND between 32-bit register `a` and 32-bit register `b` and store result in 32-bit register `des`"
      
      - mnemonic: orb
        operands: [ des_r8, a_r8, b_r8 ]
        description: "Bitwise OR between 8-bit register `a` and 8-bit register `b` and store result in 8-bit register `des`"
      
      - mnemonic: orw
        operands: [ des_r16, a_r16, b_r16 ]
        description: "Bitwise OR between 16-bit register `a` and 16-bit register `b` and store result in 16-bit register `des`"

      - mnemonic: orl
        operands: [ des_r32, a_r32, b_r32 ]
        description: "Bitwise OR between 32-bit register `a` and 32-bit register `b` and store result in 32-bit register `des`"
      
      - mnemonic: xorb
        operands: [ des_r8, a_r8, b_r8 ]
        description: "Bitwise XOR between 8-bit register `a` and 8-bit register `b` and store result in 8-bit register `des`"
      
      - mnemonic: xorw
        operands: [ des_r16, a_r16, b_r16 ]
        description: "Bitwise XOR between 16-bit register `a` and 16-bit register `b` and store result in 16-bit register `des`"

      - mnemonic: xorl
        operands: [ des_r32, a_r32, b_r32 ]
        description: "Bitwise XOR between 32-bit register `a` and 32-bit register `b` and store result in 32-bit register `des`"
      
      - mnemonic: andbv
        operands: [ des_r8, a_r8, b_v8 ]
        description: "Bitwise AND between 8-bit register `a` and 8-bit value `b` and store result in 8-bit register `des`"
      
      - mnemonic: andwv
        operands: [ des_r16, a_r16, b_v16 ]
        description: "Bitwise AND between 16-bit register `a` and 16-bit value `b` and store result in 16-bit register `des`"

      - mnemonic: andlv
        operands: [ des_r32, a_r32, b_v32 ]
        description: "Bitwise AND between 32-bit register `a` and 32-bit value `b` and store result in 32-bit register `des`"
      
      - mnemonic: orbv
        operands: [ des_r8, a_r8, b_v8 ]
        description: "Bitwise OR between 8-bit register `a` and 8-bit value `b` and store result in 8-bit register `des`"
      
      - mnemonic: orwv
        operands: [ des_r16, a_r16, b_v16 ]
        description: "Bitwise OR between 16-bit register `a` and 16-bit value `b` and store result in 16-bit register `des`"

      - mnemonic: orlv
        operands: [ des_r32, a_r32, b_v32 ]
        description: "Bitwise OR between 32-bit register `a` and 32-bit value `b` and store result in 32-bit register `des`"
      
      - mnemonic: xorbv
        operands: [ des_r8, a_r8, b_v8 ]
        description: "Bitwise XOR between 8-bit register `a` and 8-bit value `b` and store result in 8-bit register `des`"
      
      - mnemonic: xorwv
        operands: [ des_r16, a_r16, b_v16 ]
        description: "Bitwise XOR between 16-bit register `a` and 16-bit value `b` and store result in 16-bit register `des`"

      - mnemonic: xorlv
        operands: [ des_r32, a_r32, b_v32 ]
        description: "Bitwise XOR between 32-bit register `a` and 32-bit value `b` and store result in 32-bit register `des`"
      
  - name: "Arithmetic operations"
    starting_point: 30
    instructions:
      - mnemonic: addb
        operands: [ des_r8, a_r8, b_r8 ]
        description: "Add 8-bit register `a` to 8-bit register `b` and store result in 8-bit register `des`"
      
      - mnemonic: addw
        operands: [ des_r16, a_r16, b_r16 ]
        description: "Add 16-bit register `a` and 16-bit register `b` and store result in 16-bit register `des`"
      
      - mnemonic: addl
        operands: [ des_r32, a_r32, b_r32 ]
        description: "Add 32-bit register `a` and 32-bit register `b` and store result in 32-bit register `des`"
      
      - mnemonic: subb
        operands: [ des_r8, a_r8, b_r8 ]
        description: "Subtract 8-bit register `b` from 8-bit register `a` and store result in 8-bit register `des`"
      
      - mnemonic: subw
        operands: [ des_r16, a_r16, b_r16 ]
        description: "Subtract 16-bit register `b` from 16-bit register `a` and store result in 16-bit register `des`"
      
      - mnemonic: subl
        operands: [ des_r32, a_r32, b_r32 ]
        description: "Subtract 32-bit register `b` from 32-bit register `a` and store result in 32-bit register `des`"
      
      - mnemonic: mulb
        operands: [ des_r8, a_r8, b_r8 ]
        description: "Multiply 8-bit register `a` and 8-bit register `b` and store result in 8-bit register `des`"
      
      - mnemonic: mulw
        operands: [ des_r16, a_r16, b_r16 ]
        description: "Multiply 16-bit register `a` and 16-bit register `b` and store result in 16-bit register `des`"
      
      - mnemonic: mull
        operands: [ des_r32, a_r32, b_r32 ]
        description: "Multiply 32-bit register `a` and 32-bit register `b` and store result in 32-bit register `des`"
      
      - mnemonic: divb
        operands: [ des_r8, a_r8, b_r8 ]
        description: "Divide 8-bit register `a` by 8-bit register `b` and store result in 8-bit register `des`"
      
      - mnemonic: divw
        operands: [ des_r16, a_r16, b_r16 ]
        description: "Divide 16-bit register `a` by 16-bit register `b` and store result in 16-bit register `des`"
      
      - mnemonic: divl
        operands: [ des_r32, a_r32, b_r32 ]
        description: "Divide 32-bit register `a` by 32-bit register `b` and store result in 32-bit register `des`"
      
      - mnemonic: modb
        operands: [ des_r8, a_r8, b_r8 ]
        description: "Modulo 8-bit register `a` by 8-bit register `b` and store result in 8-bit register `des`"
      
      - mnemonic: modw
        operands: [ des_r16, a_r16, b_r16 ]
        description: "Modulo 16-bit register `a` by 16-bit register `b` and store result in 16-bit register `des`"
      
      - mnemonic: modl
        operands: [ des_r32, a_r32, b_r32 ]
        description: "Modulo 32-bit register `a` by 32-bit register `b` and store result in 32-bit register `des`"
      
      - mnemonic: addbv
        operands: [ des_r8, a_r8, b_v8 ]
        description: "Add 8-bit register `a` to 8-bit value `b` and store result in 8-bit register `des`"
      
      - mnemonic: addwv
        operands: [ des_r16, a_r16, b_v16 ]
        description: "Add 16-bit register `a` and 16-bit value `b` and store result in 16-bit register `des`"
      
      - mnemonic: addlv
        operands: [ des_r32, a_r32, b_v32 ]
        description: "Add 32-bit register `a` and 32-bit value `b` and store result in 32-bit register `des`"
      
      - mnemonic: subbv
        operands: [ des_r8, a_r8, b_v8 ]
        description: "Subtract 8-bit value `b` from 8-bit register `a` and store result in 8-bit register `des`"
      
      - mnemonic: subwv
        operands: [ des_r16, a_r16, b_v16 ]
        description: "Subtract 16-bit value `b` from 16-bit register `a` and store result in 16-bit register `des`"
      
      - mnemonic: sublv
        operands: [ des_r32, a_r32, b_v32 ]
        description: "Subtract 32-bit value `b` from 32-bit register `a` and store result in 32-bit register `des`"
      
      - mnemonic: mulbv
        operands: [ des_r8, a_r8, b_v8 ]
        description: "Multiply 8-bit register `a` and 8-bit value `b` and store result in 8-bit register `des`"
      
      - mnemonic: mulwv
        operands: [ des_r16, a_r16, b_v16 ]
        description: "Multiply 16-bit register `a` and 16-bit value `b` and store result in 16-bit register `des`"
      
      - mnemonic: mullv
        operands: [ des_r32, a_r32, b_v32 ]
        description: "Multiply 32-bit register `a` and 32-bit value `b` and store result in 32-bit register `des`"
      
      - mnemonic: divbv
        operands: [ des_r8, a_r8, b_v8 ]
        description: "Divide 8-bit register `a` by 8-bit value `b` and store result in 8-bit register `des`"
      
      - mnemonic: divwv
        operands: [ des_r16, a_r16, b_v16 ]
        description: "Divide 16-bit register `a` by 16-bit value `b` and store result in 16-bit register `des`"
      
      - mnemonic: divlv
        operands: [ des_r32, a_r32, b_v32 ]
        description: "Divide 32-bit register `a` by 32-bit value `b` and store result in 32-bit register `des`"
      
      - mnemonic: modbv
        operands: [ des_r8, a_r8, b_v8 ]
        description: "Modulo 8-bit register `a` by 8-bit value `b` and store result in 8-bit register `des`"
      
      - mnemonic: modwv
        operands: [ des_r16, a_r16, b_v16 ]
        description: "Modulo 16-bit register `a` by 16-bit value `b` and store result in 16-bit register `des`"
      
      - mnemonic: modlv
        operands: [ des_r32, a_r32, b_v32 ]
        description: "Modulo 32-bit register `a` by 32-bit value `b` and store result in 32-bit register `des`"

  - name: "Logical operations"
    starting_point: 40
    instructions:
      - mnemonic: cmpb
        operands: [ a_r8, b_r8 ]
        description: "Compare 8-bit register `a` with 8-bit register `b`"
      
      - mnemonic: cmpw
        operands: [ a_r16, b_r16 ]
        description: "Compare 16-bit register `a` with 16-bit register `b`"
      
      - mnemonic: cmpl
        operands: [ a_r32, b_r32 ]
        description: "Compare 32-bit register `a` with 32-bit register `b`"

      - mnemonic: jmp
        operands: [ addr_v32 ]
        description: "Jump to 32-bit address `addr`"
      
      - mnemonic: jz
        operands: [ addr_v32 ]
        description: "Jump to 32-bit address `addr` if comparison result is zero"
      